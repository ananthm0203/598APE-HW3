
main.exe:     file format elf64-x86-64


Disassembly of section .text:

0000000000001930 <_start>:
    1930:	f3 0f 1e fa          	endbr64 
    1934:	31 ed                	xor    %ebp,%ebp
    1936:	49 89 d1             	mov    %rdx,%r9
    1939:	5e                   	pop    %rsi
    193a:	48 89 e2             	mov    %rsp,%rdx
    193d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    1941:	50                   	push   %rax
    1942:	54                   	push   %rsp
    1943:	4c 8d 05 a6 07 00 00 	lea    0x7a6(%rip),%r8        # 20f0 <__libc_csu_fini>
    194a:	48 8d 0d 2f 07 00 00 	lea    0x72f(%rip),%rcx        # 2080 <__libc_csu_init>
    1951:	48 8d 3d d8 02 00 00 	lea    0x2d8(%rip),%rdi        # 1c30 <main>
    1958:	ff 15 12 1a 00 00    	callq  *0x1a12(%rip)        # 3370 <__libc_start_main@GLIBC_2.2.5>
    195e:	f4                   	hlt    
    195f:	cc                   	int3   

0000000000001960 <deregister_tm_clones>:
    1960:	48 8d 3d 49 2a 00 00 	lea    0x2a49(%rip),%rdi        # 43b0 <__TMC_END__>
    1967:	48 8d 05 42 2a 00 00 	lea    0x2a42(%rip),%rax        # 43b0 <__TMC_END__>
    196e:	48 39 f8             	cmp    %rdi,%rax
    1971:	74 15                	je     1988 <deregister_tm_clones+0x28>
    1973:	48 8b 05 06 1a 00 00 	mov    0x1a06(%rip),%rax        # 3380 <_ITM_deregisterTMCloneTable@Base>
    197a:	48 85 c0             	test   %rax,%rax
    197d:	74 09                	je     1988 <deregister_tm_clones+0x28>
    197f:	ff e0                	jmpq   *%rax
    1981:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1988:	c3                   	retq   
    1989:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001990 <register_tm_clones>:
    1990:	48 8d 3d 19 2a 00 00 	lea    0x2a19(%rip),%rdi        # 43b0 <__TMC_END__>
    1997:	48 8d 35 12 2a 00 00 	lea    0x2a12(%rip),%rsi        # 43b0 <__TMC_END__>
    199e:	48 29 fe             	sub    %rdi,%rsi
    19a1:	48 89 f0             	mov    %rsi,%rax
    19a4:	48 c1 ee 3f          	shr    $0x3f,%rsi
    19a8:	48 c1 f8 03          	sar    $0x3,%rax
    19ac:	48 01 c6             	add    %rax,%rsi
    19af:	48 d1 fe             	sar    %rsi
    19b2:	74 14                	je     19c8 <register_tm_clones+0x38>
    19b4:	48 8b 05 cd 19 00 00 	mov    0x19cd(%rip),%rax        # 3388 <_ITM_registerTMCloneTable@Base>
    19bb:	48 85 c0             	test   %rax,%rax
    19be:	74 08                	je     19c8 <register_tm_clones+0x38>
    19c0:	ff e0                	jmpq   *%rax
    19c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    19c8:	c3                   	retq   
    19c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000019d0 <__do_global_dtors_aux>:
    19d0:	f3 0f 1e fa          	endbr64 
    19d4:	80 3d 1d 2a 00 00 00 	cmpb   $0x0,0x2a1d(%rip)        # 43f8 <completed.0>
    19db:	75 2b                	jne    1a08 <__do_global_dtors_aux+0x38>
    19dd:	55                   	push   %rbp
    19de:	48 83 3d aa 19 00 00 	cmpq   $0x0,0x19aa(%rip)        # 3390 <__cxa_finalize@GLIBC_2.2.5>
    19e5:	00 
    19e6:	48 89 e5             	mov    %rsp,%rbp
    19e9:	74 0c                	je     19f7 <__do_global_dtors_aux+0x27>
    19eb:	48 8b 3d ae 29 00 00 	mov    0x29ae(%rip),%rdi        # 43a0 <__dso_handle>
    19f2:	e8 49 07 00 00       	callq  2140 <__cxa_finalize@plt>
    19f7:	e8 64 ff ff ff       	callq  1960 <deregister_tm_clones>
    19fc:	c6 05 f5 29 00 00 01 	movb   $0x1,0x29f5(%rip)        # 43f8 <completed.0>
    1a03:	5d                   	pop    %rbp
    1a04:	c3                   	retq   
    1a05:	0f 1f 00             	nopl   (%rax)
    1a08:	c3                   	retq   
    1a09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001a10 <frame_dummy>:
    1a10:	f3 0f 1e fa          	endbr64 
    1a14:	e9 77 ff ff ff       	jmpq   1990 <register_tm_clones>
    1a19:	cc                   	int3   
    1a1a:	cc                   	int3   
    1a1b:	cc                   	int3   
    1a1c:	cc                   	int3   
    1a1d:	cc                   	int3   
    1a1e:	cc                   	int3   
    1a1f:	cc                   	int3   

0000000000001a20 <_Z5tdiffP7timevalS0_>:
#include<math.h>

#include <sys/time.h>

float tdiff(struct timeval *start, struct timeval *end) {
  return (end->tv_sec-start->tv_sec) + 1e-6*(end->tv_usec-start->tv_usec);
    1a20:	48 8b 06             	mov    (%rsi),%rax
    1a23:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
    1a27:	48 2b 07             	sub    (%rdi),%rax
    1a2a:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    1a2f:	48 2b 4f 08          	sub    0x8(%rdi),%rcx
    1a33:	f2 48 0f 2a c9       	cvtsi2sd %rcx,%xmm1
    1a38:	f2 0f 59 0d 70 ec ff 	mulsd  -0x1390(%rip),%xmm1        # 6b0 <_IO_stdin_used+0x10>
    1a3f:	ff 
    1a40:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
    1a44:	0f 57 c0             	xorps  %xmm0,%xmm0
    1a47:	f2 0f 5a c1          	cvtsd2ss %xmm1,%xmm0
    1a4b:	c3                   	retq   
    1a4c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001a50 <_Z9randomU64v>:
};

unsigned long long seed = 100;

unsigned long long randomU64() {
  seed ^= (seed << 21);
    1a50:	48 8b 05 51 29 00 00 	mov    0x2951(%rip),%rax        # 43a8 <seed>
    1a57:	48 89 c1             	mov    %rax,%rcx
    1a5a:	48 c1 e1 15          	shl    $0x15,%rcx
    1a5e:	48 31 c1             	xor    %rax,%rcx
  seed ^= (seed >> 35);
    1a61:	48 89 ca             	mov    %rcx,%rdx
    1a64:	48 c1 ea 23          	shr    $0x23,%rdx
    1a68:	48 31 ca             	xor    %rcx,%rdx
  seed ^= (seed << 4);
    1a6b:	48 89 d0             	mov    %rdx,%rax
    1a6e:	48 c1 e0 04          	shl    $0x4,%rax
    1a72:	48 31 d0             	xor    %rdx,%rax
    1a75:	48 89 05 2c 29 00 00 	mov    %rax,0x292c(%rip)        # 43a8 <seed>
  return seed;
    1a7c:	c3                   	retq   
    1a7d:	0f 1f 00             	nopl   (%rax)

0000000000001a80 <_Z12randomDoublev>:
  seed ^= (seed << 21);
    1a80:	48 8b 05 21 29 00 00 	mov    0x2921(%rip),%rax        # 43a8 <seed>
    1a87:	48 89 c1             	mov    %rax,%rcx
    1a8a:	48 c1 e1 15          	shl    $0x15,%rcx
    1a8e:	48 31 c1             	xor    %rax,%rcx
  seed ^= (seed >> 35);
    1a91:	48 89 c8             	mov    %rcx,%rax
    1a94:	48 c1 e8 23          	shr    $0x23,%rax
    1a98:	48 31 c8             	xor    %rcx,%rax
  seed ^= (seed << 4);
    1a9b:	48 89 c1             	mov    %rax,%rcx
    1a9e:	48 c1 e1 04          	shl    $0x4,%rcx
    1aa2:	48 31 c1             	xor    %rax,%rcx
  seed ^= (seed << 21);
    1aa5:	48 89 c8             	mov    %rcx,%rax
    1aa8:	48 c1 e0 15          	shl    $0x15,%rax
    1aac:	48 31 c8             	xor    %rcx,%rax
  seed ^= (seed >> 35);
    1aaf:	48 89 c2             	mov    %rax,%rdx
    1ab2:	48 c1 ea 23          	shr    $0x23,%rdx
    1ab6:	48 31 c2             	xor    %rax,%rdx
  seed ^= (seed << 4);
    1ab9:	48 89 d0             	mov    %rdx,%rax
    1abc:	48 c1 e0 04          	shl    $0x4,%rax
    1ac0:	48 31 d0             	xor    %rdx,%rax
    1ac3:	48 89 05 de 28 00 00 	mov    %rax,0x28de(%rip)        # 43a8 <seed>
double randomDouble()
{
   unsigned long long next = randomU64();
   next >>= (64 - 26);
   unsigned long long next2 = randomU64();
   next2 >>= (64 - 26);
    1aca:	48 c1 e8 26          	shr    $0x26,%rax
   return ((next << 27) + next2) / (double)(1LL << 53);
    1ace:	48 c1 e9 0b          	shr    $0xb,%rcx
    1ad2:	48 81 e1 00 00 00 f8 	and    $0xfffffffff8000000,%rcx
    1ad9:	48 09 c1             	or     %rax,%rcx
    1adc:	f2 48 0f 2a c1       	cvtsi2sd %rcx,%xmm0
    1ae1:	f2 0f 59 05 cf eb ff 	mulsd  -0x1431(%rip),%xmm0        # 6b8 <_IO_stdin_used+0x18>
    1ae8:	ff 
    1ae9:	c3                   	retq   
    1aea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001af0 <_Z4nextP6PlanetS0_>:
int nplanets;
int timesteps;
constexpr double dt = 0.001;
constexpr double G = 6.6743;

void next(Planet * __restrict__ planets, Planet * __restrict__ nextplanets) {
    1af0:	8b 05 06 29 00 00    	mov    0x2906(%rip),%eax        # 43fc <nplanets>
   for (int i=0; i<nplanets; i++) {
    1af6:	85 c0                	test   %eax,%eax
    1af8:	0f 8e 23 01 00 00    	jle    1c21 <_Z4nextP6PlanetS0_+0x131>
    1afe:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
    1b05:	00 
    1b06:	48 8d 0c 89          	lea    (%rcx,%rcx,4),%rcx
    1b0a:	31 d2                	xor    %edx,%edx
    1b0c:	0f 1f 40 00          	nopl   0x0(%rax)
      nextplanets[i].vx = planets[i].vx;
      nextplanets[i].vy = planets[i].vy;
    1b10:	f2 0f 10 44 17 20    	movsd  0x20(%rdi,%rdx,1),%xmm0
    1b16:	f2 0f 11 44 16 20    	movsd  %xmm0,0x20(%rsi,%rdx,1)
      nextplanets[i].mass = planets[i].mass;
    1b1c:	0f 10 04 17          	movups (%rdi,%rdx,1),%xmm0
    1b20:	0f 11 04 16          	movups %xmm0,(%rsi,%rdx,1)
      nextplanets[i].x = planets[i].x;
      nextplanets[i].y = planets[i].y;
    1b24:	66 0f 10 44 17 10    	movupd 0x10(%rdi,%rdx,1),%xmm0
    1b2a:	66 0f 11 44 16 10    	movupd %xmm0,0x10(%rsi,%rdx,1)
   for (int i=0; i<nplanets; i++) {
    1b30:	48 83 c2 28          	add    $0x28,%rdx
    1b34:	48 39 d1             	cmp    %rdx,%rcx
    1b37:	75 d7                	jne    1b10 <_Z4nextP6PlanetS0_+0x20>
    1b39:	85 c0                	test   %eax,%eax
   }

   for (int i=0; i<nplanets; i++) {
    1b3b:	0f 8e e0 00 00 00    	jle    1c21 <_Z4nextP6PlanetS0_+0x131>
    1b41:	31 d2                	xor    %edx,%edx
    1b43:	f2 0f 10 05 85 eb ff 	movsd  -0x147b(%rip),%xmm0        # 6d0 <_IO_stdin_used+0x30>
    1b4a:	ff 
    1b4b:	66 0f 28 0d cd eb ff 	movapd -0x1433(%rip),%xmm1        # 720 <_IO_stdin_used+0x80>
    1b52:	ff 
    1b53:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    1b5a:	84 00 00 00 00 00 
    1b60:	4c 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%r8
    1b67:	00 
    1b68:	4f 8d 0c 80          	lea    (%r8,%r8,4),%r9
    1b6c:	f2 42 0f 10 1c 0f    	movsd  (%rdi,%r9,1),%xmm3
    1b72:	4e 8d 04 0e          	lea    (%rsi,%r9,1),%r8
    1b76:	49 83 c0 18          	add    $0x18,%r8
    1b7a:	66 42 0f 10 64 0f 08 	movupd 0x8(%rdi,%r9,1),%xmm4
    1b81:	66 42 0f 10 54 0e 18 	movupd 0x18(%rsi,%r9,1),%xmm2
    1b88:	45 31 c9             	xor    %r9d,%r9d
    1b8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      for (int j=0; j<nplanets; j++) {
         double dx = planets[j].x - planets[i].x;
    1b90:	66 42 0f 10 6c 0f 08 	movupd 0x8(%rdi,%r9,1),%xmm5
    1b97:	f2 42 0f 10 34 0f    	movsd  (%rdi,%r9,1),%xmm6
    1b9d:	66 0f 5c ec          	subpd  %xmm4,%xmm5
         double dy = planets[j].y - planets[i].y;
         double distSqr = dx*dx + dy*dy + 0.0001;
    1ba1:	66 0f 28 fd          	movapd %xmm5,%xmm7
    1ba5:	66 0f 59 fd          	mulpd  %xmm5,%xmm7
    1ba9:	66 0f 15 ff          	unpckhpd %xmm7,%xmm7
    1bad:	66 44 0f 28 c5       	movapd %xmm5,%xmm8
    1bb2:	f2 44 0f 59 c5       	mulsd  %xmm5,%xmm8
    1bb7:	f2 44 0f 58 c7       	addsd  %xmm7,%xmm8
         double invDist = planets[i].mass * planets[j].mass / sqrt(distSqr);
    1bbc:	f2 0f 59 f3          	mulsd  %xmm3,%xmm6
         double distSqr = dx*dx + dy*dy + 0.0001;
    1bc0:	f2 44 0f 58 c0       	addsd  %xmm0,%xmm8
         double invDist = planets[i].mass * planets[j].mass / sqrt(distSqr);
    1bc5:	0f 57 ff             	xorps  %xmm7,%xmm7
    1bc8:	f2 41 0f 51 f8       	sqrtsd %xmm8,%xmm7
    1bcd:	f2 0f 5e f7          	divsd  %xmm7,%xmm6
         double invDist3 = invDist * invDist * invDist;
    1bd1:	66 0f 28 fe          	movapd %xmm6,%xmm7
    1bd5:	f2 0f 59 fe          	mulsd  %xmm6,%xmm7
    1bd9:	f2 0f 59 fe          	mulsd  %xmm6,%xmm7
         nextplanets[i].vx += dt * dx * invDist3;
    1bdd:	66 0f 59 e9          	mulpd  %xmm1,%xmm5
    1be1:	66 0f 14 ff          	unpcklpd %xmm7,%xmm7
    1be5:	66 0f 59 fd          	mulpd  %xmm5,%xmm7
    1be9:	66 0f 58 d7          	addpd  %xmm7,%xmm2
      for (int j=0; j<nplanets; j++) {
    1bed:	49 83 c1 28          	add    $0x28,%r9
    1bf1:	4c 39 c9             	cmp    %r9,%rcx
    1bf4:	75 9a                	jne    1b90 <_Z4nextP6PlanetS0_+0xa0>
         nextplanets[i].vx += dt * dx * invDist3;
    1bf6:	66 41 0f 11 10       	movupd %xmm2,(%r8)
         nextplanets[i].vy += dt * dy * invDist3;
      }
      nextplanets[i].x += dt * nextplanets[i].vx;
    1bfb:	4c 8d 04 92          	lea    (%rdx,%rdx,4),%r8
    1bff:	66 42 0f 10 5c c6 08 	movupd 0x8(%rsi,%r8,8),%xmm3
    1c06:	66 0f 59 d1          	mulpd  %xmm1,%xmm2
    1c0a:	66 0f 58 d3          	addpd  %xmm3,%xmm2
    1c0e:	66 42 0f 11 54 c6 08 	movupd %xmm2,0x8(%rsi,%r8,8)
   for (int i=0; i<nplanets; i++) {
    1c15:	48 ff c2             	inc    %rdx
    1c18:	48 39 c2             	cmp    %rax,%rdx
    1c1b:	0f 85 3f ff ff ff    	jne    1b60 <_Z4nextP6PlanetS0_+0x70>
      nextplanets[i].y += dt * nextplanets[i].vy;
   }
}
    1c21:	c3                   	retq   
    1c22:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
    1c29:	1f 84 00 00 00 00 00 

0000000000001c30 <main>:

int main(int argc, const char** argv){
    1c30:	55                   	push   %rbp
    1c31:	41 57                	push   %r15
    1c33:	41 56                	push   %r14
    1c35:	41 55                	push   %r13
    1c37:	41 54                	push   %r12
    1c39:	53                   	push   %rbx
    1c3a:	48 83 ec 48          	sub    $0x48,%rsp
   if (argc < 2) {
    1c3e:	83 ff 01             	cmp    $0x1,%edi
    1c41:	7f 1c                	jg     1c5f <main+0x2f>
      printf("Usage: %s <nplanets> <timesteps>\n", argv[0]);
    1c43:	48 8b 36             	mov    (%rsi),%rsi
    1c46:	48 8d 3d 45 eb ff ff 	lea    -0x14bb(%rip),%rdi        # 792 <_IO_stdin_used+0xf2>
    1c4d:	31 c0                	xor    %eax,%eax
    1c4f:	e8 fc 04 00 00       	callq  2150 <printf@plt>
    1c54:	41 bf 01 00 00 00    	mov    $0x1,%r15d
    1c5a:	e9 0f 04 00 00       	jmpq   206e <main+0x43e>
      return 1;
   }
   nplanets = atoi(argv[1]);
    1c5f:	48 8b 7e 08          	mov    0x8(%rsi),%rdi
    1c63:	49 89 f6             	mov    %rsi,%r14

#ifdef __USE_EXTERN_INLINES
__extern_inline int
__NTH (atoi (const char *__nptr))
{
  return (int) strtol (__nptr, (char **) NULL, 10);
    1c66:	31 f6                	xor    %esi,%esi
    1c68:	ba 0a 00 00 00       	mov    $0xa,%edx
    1c6d:	e8 ee 04 00 00       	callq  2160 <strtol@plt>
    1c72:	48 89 c3             	mov    %rax,%rbx
    1c75:	89 1d 81 27 00 00    	mov    %ebx,0x2781(%rip)        # 43fc <nplanets>
   timesteps = atoi(argv[2]);
    1c7b:	49 8b 7e 10          	mov    0x10(%r14),%rdi
    1c7f:	31 f6                	xor    %esi,%esi
    1c81:	ba 0a 00 00 00       	mov    $0xa,%edx
    1c86:	e8 d5 04 00 00       	callq  2160 <strtol@plt>
    1c8b:	89 05 6f 27 00 00    	mov    %eax,0x276f(%rip)        # 4400 <timesteps>

   Planet* planets = (Planet*)malloc(sizeof(Planet) * nplanets);
    1c91:	48 63 c3             	movslq %ebx,%rax
    1c94:	48 c1 e0 03          	shl    $0x3,%rax
    1c98:	48 8d 3c 80          	lea    (%rax,%rax,4),%rdi
    1c9c:	e8 cf 04 00 00       	callq  2170 <malloc@plt>
    1ca1:	48 89 c3             	mov    %rax,%rbx
   Planet* nextplanets = (Planet*)malloc(sizeof(Planet) * nplanets);
    1ca4:	4c 63 2d 51 27 00 00 	movslq 0x2751(%rip),%r13        # 43fc <nplanets>
    1cab:	4a 8d 04 ed 00 00 00 	lea    0x0(,%r13,8),%rax
    1cb2:	00 
    1cb3:	48 8d 3c 80          	lea    (%rax,%rax,4),%rdi
    1cb7:	e8 b4 04 00 00       	callq  2170 <malloc@plt>
    1cbc:	49 89 c6             	mov    %rax,%r14
    1cbf:	4d 85 ed             	test   %r13,%r13
   for (int i=0; i<nplanets; i++) {
    1cc2:	0f 8e f8 02 00 00    	jle    1fc0 <main+0x390>
  seed ^= (seed << 21);
    1cc8:	48 8b 05 d9 26 00 00 	mov    0x26d9(%rip),%rax        # 43a8 <seed>
    1ccf:	45 31 ff             	xor    %r15d,%r15d
    1cd2:	49 89 dc             	mov    %rbx,%r12
    1cd5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    1cdc:	00 00 00 00 
    1ce0:	48 89 c1             	mov    %rax,%rcx
    1ce3:	48 c1 e1 15          	shl    $0x15,%rcx
    1ce7:	48 31 c1             	xor    %rax,%rcx
  seed ^= (seed >> 35);
    1cea:	48 89 ca             	mov    %rcx,%rdx
    1ced:	48 c1 ea 23          	shr    $0x23,%rdx
    1cf1:	48 31 ca             	xor    %rcx,%rdx
  seed ^= (seed << 4);
    1cf4:	48 89 d0             	mov    %rdx,%rax
    1cf7:	48 c1 e0 04          	shl    $0x4,%rax
    1cfb:	48 31 d0             	xor    %rdx,%rax
  seed ^= (seed << 21);
    1cfe:	48 89 c1             	mov    %rax,%rcx
    1d01:	48 c1 e1 15          	shl    $0x15,%rcx
    1d05:	48 31 c1             	xor    %rax,%rcx
  seed ^= (seed >> 35);
    1d08:	48 89 ca             	mov    %rcx,%rdx
    1d0b:	48 c1 ea 23          	shr    $0x23,%rdx
    1d0f:	48 31 ca             	xor    %rcx,%rdx
  seed ^= (seed << 4);
    1d12:	48 89 d1             	mov    %rdx,%rcx
    1d15:	48 c1 e1 04          	shl    $0x4,%rcx
    1d19:	48 31 d1             	xor    %rdx,%rcx
  seed ^= (seed << 21);
    1d1c:	48 89 ca             	mov    %rcx,%rdx
   next2 >>= (64 - 26);
    1d1f:	48 89 ce             	mov    %rcx,%rsi
    1d22:	48 c1 ee 26          	shr    $0x26,%rsi
   return ((next << 27) + next2) / (double)(1LL << 53);
    1d26:	48 c1 e8 0b          	shr    $0xb,%rax
    1d2a:	48 25 00 00 00 f8    	and    $0xfffffffff8000000,%rax
    1d30:	48 09 f0             	or     %rsi,%rax
    1d33:	0f 57 c0             	xorps  %xmm0,%xmm0
    1d36:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
  seed ^= (seed << 21);
    1d3b:	48 c1 e2 15          	shl    $0x15,%rdx
    1d3f:	48 31 ca             	xor    %rcx,%rdx
   return ((next << 27) + next2) / (double)(1LL << 53);
    1d42:	f2 0f 59 05 6e e9 ff 	mulsd  -0x1692(%rip),%xmm0        # 6b8 <_IO_stdin_used+0x18>
    1d49:	ff 
      planets[i].mass = randomDouble() * 10 + 0.2;
    1d4a:	f2 0f 59 05 76 e9 ff 	mulsd  -0x168a(%rip),%xmm0        # 6c8 <_IO_stdin_used+0x28>
    1d51:	ff 
    1d52:	f2 0f 58 05 66 e9 ff 	addsd  -0x169a(%rip),%xmm0        # 6c0 <_IO_stdin_used+0x20>
    1d59:	ff 
    1d5a:	f2 41 0f 11 04 24    	movsd  %xmm0,(%r12)
  seed ^= (seed >> 35);
    1d60:	48 89 d0             	mov    %rdx,%rax
    1d63:	48 c1 e8 23          	shr    $0x23,%rax
    1d67:	48 31 d0             	xor    %rdx,%rax
  seed ^= (seed << 4);
    1d6a:	48 89 c5             	mov    %rax,%rbp
      planets[i].x = ( randomDouble() - 0.5 ) * 100 * pow(1 + nplanets, 0.4);
    1d6d:	41 ff c5             	inc    %r13d
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    1d70:	0f 57 c0             	xorps  %xmm0,%xmm0
    1d73:	f2 41 0f 2a c5       	cvtsi2sd %r13d,%xmm0
  seed ^= (seed << 4);
    1d78:	48 c1 e5 04          	shl    $0x4,%rbp
    1d7c:	48 31 c5             	xor    %rax,%rbp
  seed ^= (seed << 21);
    1d7f:	48 89 e8             	mov    %rbp,%rax
    1d82:	48 c1 e0 15          	shl    $0x15,%rax
    1d86:	48 31 e8             	xor    %rbp,%rax
  seed ^= (seed >> 35);
    1d89:	48 89 c1             	mov    %rax,%rcx
    1d8c:	48 c1 e9 23          	shr    $0x23,%rcx
    1d90:	48 31 c1             	xor    %rax,%rcx
  seed ^= (seed << 4);
    1d93:	49 89 cd             	mov    %rcx,%r13
    1d96:	49 c1 e5 04          	shl    $0x4,%r13
    1d9a:	49 31 cd             	xor    %rcx,%r13
    1d9d:	4c 89 2d 04 26 00 00 	mov    %r13,0x2604(%rip)        # 43a8 <seed>
    1da4:	f2 0f 10 0d fc e8 ff 	movsd  -0x1704(%rip),%xmm1        # 6a8 <_IO_stdin_used+0x8>
    1dab:	ff 
    1dac:	e8 cf 03 00 00       	callq  2180 <pow@plt>
    1db1:	66 0f 29 44 24 30    	movapd %xmm0,0x30(%rsp)
  seed ^= (seed << 21);
    1db7:	48 8b 05 ea 25 00 00 	mov    0x25ea(%rip),%rax        # 43a8 <seed>
    1dbe:	48 89 c1             	mov    %rax,%rcx
    1dc1:	48 c1 e1 15          	shl    $0x15,%rcx
    1dc5:	48 31 c1             	xor    %rax,%rcx
  seed ^= (seed >> 35);
    1dc8:	48 89 c8             	mov    %rcx,%rax
    1dcb:	48 c1 e8 23          	shr    $0x23,%rax
    1dcf:	48 31 c8             	xor    %rcx,%rax
  seed ^= (seed << 4);
    1dd2:	48 89 c1             	mov    %rax,%rcx
    1dd5:	48 c1 e1 04          	shl    $0x4,%rcx
    1dd9:	48 31 c1             	xor    %rax,%rcx
  seed ^= (seed << 21);
    1ddc:	48 89 c8             	mov    %rcx,%rax
    1ddf:	48 c1 e0 15          	shl    $0x15,%rax
    1de3:	48 31 c8             	xor    %rcx,%rax
  seed ^= (seed >> 35);
    1de6:	48 89 c2             	mov    %rax,%rdx
    1de9:	48 c1 ea 23          	shr    $0x23,%rdx
    1ded:	48 31 c2             	xor    %rax,%rdx
  seed ^= (seed << 4);
    1df0:	48 89 d0             	mov    %rdx,%rax
    1df3:	48 c1 e0 04          	shl    $0x4,%rax
    1df7:	48 31 d0             	xor    %rdx,%rax
    1dfa:	48 89 05 a7 25 00 00 	mov    %rax,0x25a7(%rip)        # 43a8 <seed>
   next2 >>= (64 - 26);
    1e01:	66 49 0f 6e c5       	movq   %r13,%xmm0
    1e06:	66 48 0f 6e c8       	movq   %rax,%xmm1
    1e0b:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
    1e0f:	66 0f 73 d0 26       	psrlq  $0x26,%xmm0
   return ((next << 27) + next2) / (double)(1LL << 53);
    1e14:	66 48 0f 6e cd       	movq   %rbp,%xmm1
    1e19:	66 48 0f 6e d1       	movq   %rcx,%xmm2
    1e1e:	66 0f 6c ca          	punpcklqdq %xmm2,%xmm1
    1e22:	66 0f 73 d1 0b       	psrlq  $0xb,%xmm1
    1e27:	66 0f 6f 15 e1 e8 ff 	movdqa -0x171f(%rip),%xmm2        # 710 <_IO_stdin_used+0x70>
    1e2e:	ff 
    1e2f:	66 0f db ca          	pand   %xmm2,%xmm1
    1e33:	66 0f eb c8          	por    %xmm0,%xmm1
    1e37:	66 48 0f 7e c8       	movq   %xmm1,%rax
    1e3c:	0f 57 d2             	xorps  %xmm2,%xmm2
    1e3f:	f2 48 0f 2a d0       	cvtsi2sd %rax,%xmm2
    1e44:	66 0f 70 c1 ee       	pshufd $0xee,%xmm1,%xmm0
    1e49:	66 48 0f 7e c0       	movq   %xmm0,%rax
    1e4e:	0f 57 c0             	xorps  %xmm0,%xmm0
    1e51:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    1e56:	66 0f 14 d0          	unpcklpd %xmm0,%xmm2
    1e5a:	66 0f 28 05 8e e8 ff 	movapd -0x1772(%rip),%xmm0        # 6f0 <_IO_stdin_used+0x50>
    1e61:	ff 
    1e62:	66 0f 59 d0          	mulpd  %xmm0,%xmm2
      planets[i].x = ( randomDouble() - 0.5 ) * 100 * pow(1 + nplanets, 0.4);
    1e66:	66 0f 58 15 d2 e8 ff 	addpd  -0x172e(%rip),%xmm2        # 740 <_IO_stdin_used+0xa0>
    1e6d:	ff 
    1e6e:	66 0f 59 15 6a e8 ff 	mulpd  -0x1796(%rip),%xmm2        # 6e0 <_IO_stdin_used+0x40>
    1e75:	ff 
    1e76:	66 0f 29 54 24 20    	movapd %xmm2,0x20(%rsp)
      planets[i].y = ( randomDouble() - 0.5 ) * 100 * pow(1 + nplanets, 0.4);
    1e7c:	8b 05 7a 25 00 00    	mov    0x257a(%rip),%eax        # 43fc <nplanets>
    1e82:	ff c0                	inc    %eax
    1e84:	0f 57 c0             	xorps  %xmm0,%xmm0
    1e87:	f2 0f 2a c0          	cvtsi2sd %eax,%xmm0
    1e8b:	f2 0f 10 0d 15 e8 ff 	movsd  -0x17eb(%rip),%xmm1        # 6a8 <_IO_stdin_used+0x8>
    1e92:	ff 
    1e93:	e8 e8 02 00 00       	callq  2180 <pow@plt>
  seed ^= (seed << 21);
    1e98:	48 8b 05 09 25 00 00 	mov    0x2509(%rip),%rax        # 43a8 <seed>
    1e9f:	48 89 c1             	mov    %rax,%rcx
    1ea2:	48 c1 e1 15          	shl    $0x15,%rcx
    1ea6:	48 31 c1             	xor    %rax,%rcx
  seed ^= (seed >> 35);
    1ea9:	48 89 c8             	mov    %rcx,%rax
    1eac:	48 c1 e8 23          	shr    $0x23,%rax
    1eb0:	48 31 c8             	xor    %rcx,%rax
  seed ^= (seed << 4);
    1eb3:	48 89 c1             	mov    %rax,%rcx
    1eb6:	48 c1 e1 04          	shl    $0x4,%rcx
    1eba:	48 31 c1             	xor    %rax,%rcx
  seed ^= (seed << 21);
    1ebd:	48 89 c8             	mov    %rcx,%rax
    1ec0:	48 c1 e0 15          	shl    $0x15,%rax
    1ec4:	48 31 c8             	xor    %rcx,%rax
  seed ^= (seed >> 35);
    1ec7:	48 89 c6             	mov    %rax,%rsi
    1eca:	48 c1 ee 23          	shr    $0x23,%rsi
    1ece:	48 31 c6             	xor    %rax,%rsi
  seed ^= (seed << 4);
    1ed1:	48 89 f2             	mov    %rsi,%rdx
    1ed4:	48 c1 e2 04          	shl    $0x4,%rdx
    1ed8:	48 31 f2             	xor    %rsi,%rdx
  seed ^= (seed << 21);
    1edb:	48 89 d0             	mov    %rdx,%rax
    1ede:	48 c1 e0 15          	shl    $0x15,%rax
    1ee2:	48 31 d0             	xor    %rdx,%rax
  seed ^= (seed >> 35);
    1ee5:	48 89 c6             	mov    %rax,%rsi
    1ee8:	48 c1 ee 23          	shr    $0x23,%rsi
    1eec:	48 31 c6             	xor    %rax,%rsi
  seed ^= (seed << 4);
    1eef:	48 89 f7             	mov    %rsi,%rdi
    1ef2:	48 c1 e7 04          	shl    $0x4,%rdi
    1ef6:	48 31 f7             	xor    %rsi,%rdi
  seed ^= (seed << 21);
    1ef9:	48 89 f8             	mov    %rdi,%rax
    1efc:	48 c1 e0 15          	shl    $0x15,%rax
    1f00:	66 0f 28 4c 24 30    	movapd 0x30(%rsp),%xmm1
      planets[i].x = ( randomDouble() - 0.5 ) * 100 * pow(1 + nplanets, 0.4);
    1f06:	66 0f 14 c8          	unpcklpd %xmm0,%xmm1
  seed ^= (seed << 21);
    1f0a:	48 31 f8             	xor    %rdi,%rax
  seed ^= (seed >> 35);
    1f0d:	48 89 c6             	mov    %rax,%rsi
    1f10:	48 c1 ee 23          	shr    $0x23,%rsi
      planets[i].x = ( randomDouble() - 0.5 ) * 100 * pow(1 + nplanets, 0.4);
    1f14:	66 0f 59 4c 24 20    	mulpd  0x20(%rsp),%xmm1
  seed ^= (seed >> 35);
    1f1a:	48 31 c6             	xor    %rax,%rsi
  seed ^= (seed << 4);
    1f1d:	48 89 f0             	mov    %rsi,%rax
    1f20:	48 c1 e0 04          	shl    $0x4,%rax
      planets[i].x = ( randomDouble() - 0.5 ) * 100 * pow(1 + nplanets, 0.4);
    1f24:	66 41 0f 11 4c 24 08 	movupd %xmm1,0x8(%r12)
  seed ^= (seed << 4);
    1f2b:	48 31 f0             	xor    %rsi,%rax
   next2 >>= (64 - 26);
    1f2e:	66 48 0f 6e c0       	movq   %rax,%xmm0
    1f33:	66 48 0f 6e ca       	movq   %rdx,%xmm1
    1f38:	66 0f 6c c8          	punpcklqdq %xmm0,%xmm1
   return ((next << 27) + next2) / (double)(1LL << 53);
    1f3c:	66 48 0f 6e c7       	movq   %rdi,%xmm0
    1f41:	66 48 0f 6e d1       	movq   %rcx,%xmm2
    1f46:	66 0f 6c d0          	punpcklqdq %xmm0,%xmm2
   next2 >>= (64 - 26);
    1f4a:	66 0f 73 d1 26       	psrlq  $0x26,%xmm1
   return ((next << 27) + next2) / (double)(1LL << 53);
    1f4f:	66 0f 73 d2 0b       	psrlq  $0xb,%xmm2
    1f54:	66 0f db 15 b4 e7 ff 	pand   -0x184c(%rip),%xmm2        # 710 <_IO_stdin_used+0x70>
    1f5b:	ff 
    1f5c:	66 0f eb d1          	por    %xmm1,%xmm2
    1f60:	66 48 0f 7e d1       	movq   %xmm2,%rcx
    1f65:	66 0f 70 c2 ee       	pshufd $0xee,%xmm2,%xmm0
    1f6a:	66 48 0f 7e c2       	movq   %xmm0,%rdx
    1f6f:	0f 57 c0             	xorps  %xmm0,%xmm0
    1f72:	f2 48 0f 2a c1       	cvtsi2sd %rcx,%xmm0
    1f77:	0f 57 c9             	xorps  %xmm1,%xmm1
    1f7a:	f2 48 0f 2a ca       	cvtsi2sd %rdx,%xmm1
    1f7f:	66 0f 14 c1          	unpcklpd %xmm1,%xmm0
  seed ^= (seed << 4);
    1f83:	48 89 05 1e 24 00 00 	mov    %rax,0x241e(%rip)        # 43a8 <seed>
   return ((next << 27) + next2) / (double)(1LL << 53);
    1f8a:	66 0f 59 05 5e e7 ff 	mulpd  -0x18a2(%rip),%xmm0        # 6f0 <_IO_stdin_used+0x50>
    1f91:	ff 
      planets[i].vx = randomDouble() * 5 - 2.5;
    1f92:	66 0f 59 05 66 e7 ff 	mulpd  -0x189a(%rip),%xmm0        # 700 <_IO_stdin_used+0x60>
    1f99:	ff 
    1f9a:	66 0f 58 05 8e e7 ff 	addpd  -0x1872(%rip),%xmm0        # 730 <_IO_stdin_used+0x90>
    1fa1:	ff 
    1fa2:	66 41 0f 11 44 24 18 	movupd %xmm0,0x18(%r12)
   for (int i=0; i<nplanets; i++) {
    1fa9:	49 ff c7             	inc    %r15
    1fac:	4c 63 2d 49 24 00 00 	movslq 0x2449(%rip),%r13        # 43fc <nplanets>
    1fb3:	49 83 c4 28          	add    $0x28,%r12
    1fb7:	4d 39 ef             	cmp    %r13,%r15
    1fba:	0f 8c 20 fd ff ff    	jl     1ce0 <main+0xb0>
    1fc0:	45 31 ff             	xor    %r15d,%r15d
    1fc3:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
      planets[i].vy = randomDouble() * 5 - 2.5;
   }

   struct timeval start, end;
   gettimeofday(&start, NULL);
    1fc8:	31 f6                	xor    %esi,%esi
    1fca:	e8 c1 01 00 00       	callq  2190 <gettimeofday@plt>
   for (int i=0; i<timesteps; i++) {
    1fcf:	83 3d 2a 24 00 00 00 	cmpl   $0x0,0x242a(%rip)        # 4400 <timesteps>
    1fd6:	7e 28                	jle    2000 <main+0x3d0>
    1fd8:	31 ed                	xor    %ebp,%ebp
    1fda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1fe0:	4d 89 f4             	mov    %r14,%r12
      next(planets, nextplanets);
    1fe3:	48 89 df             	mov    %rbx,%rdi
    1fe6:	4c 89 f6             	mov    %r14,%rsi
    1fe9:	e8 02 fb ff ff       	callq  1af0 <_Z4nextP6PlanetS0_>
   for (int i=0; i<timesteps; i++) {
    1fee:	ff c5                	inc    %ebp
    1ff0:	49 89 de             	mov    %rbx,%r14
    1ff3:	4c 89 e3             	mov    %r12,%rbx
    1ff6:	3b 2d 04 24 00 00    	cmp    0x2404(%rip),%ebp        # 4400 <timesteps>
    1ffc:	7c e2                	jl     1fe0 <main+0x3b0>
    1ffe:	eb 03                	jmp    2003 <main+0x3d3>
    2000:	49 89 dc             	mov    %rbx,%r12
    2003:	48 89 e7             	mov    %rsp,%rdi
      std::swap(planets, nextplanets);
      // printf("x=%f y=%f vx=%f vy=%f\n", planets[nplanets-1].x, planets[nplanets-1].y, planets[nplanets-1].vx, planets[nplanets-1].vy);
   }
   gettimeofday(&end, NULL);
    2006:	31 f6                	xor    %esi,%esi
    2008:	e8 83 01 00 00       	callq  2190 <gettimeofday@plt>
  return (end->tv_sec-start->tv_sec) + 1e-6*(end->tv_usec-start->tv_usec);
    200d:	48 8b 04 24          	mov    (%rsp),%rax
    2011:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    2016:	48 2b 44 24 10       	sub    0x10(%rsp),%rax
    201b:	0f 57 c0             	xorps  %xmm0,%xmm0
    201e:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    2023:	48 2b 4c 24 18       	sub    0x18(%rsp),%rcx
    2028:	0f 57 c9             	xorps  %xmm1,%xmm1
    202b:	f2 48 0f 2a c9       	cvtsi2sd %rcx,%xmm1
    2030:	f2 0f 59 0d 78 e6 ff 	mulsd  -0x1988(%rip),%xmm1        # 6b0 <_IO_stdin_used+0x10>
    2037:	ff 
    2038:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
    203c:	0f 57 c0             	xorps  %xmm0,%xmm0
    203f:	f2 0f 5a c1          	cvtsd2ss %xmm1,%xmm0
   printf("Total time to run simulation %0.6f seconds, final location %f %f\n", tdiff(&start, &end), planets[nplanets-1].x, planets[nplanets-1].y);
    2043:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
    2047:	48 63 05 ae 23 00 00 	movslq 0x23ae(%rip),%rax        # 43fc <nplanets>
    204e:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
    2052:	f2 41 0f 10 4c c4 e0 	movsd  -0x20(%r12,%rax,8),%xmm1
    2059:	f2 41 0f 10 54 c4 e8 	movsd  -0x18(%r12,%rax,8),%xmm2
    2060:	48 8d 3d e9 e6 ff ff 	lea    -0x1917(%rip),%rdi        # 750 <_IO_stdin_used+0xb0>
    2067:	b0 03                	mov    $0x3,%al
    2069:	e8 e2 00 00 00       	callq  2150 <printf@plt>

   return 0;   
    206e:	44 89 f8             	mov    %r15d,%eax
    2071:	48 83 c4 48          	add    $0x48,%rsp
    2075:	5b                   	pop    %rbx
    2076:	41 5c                	pop    %r12
    2078:	41 5d                	pop    %r13
    207a:	41 5e                	pop    %r14
    207c:	41 5f                	pop    %r15
    207e:	5d                   	pop    %rbp
    207f:	c3                   	retq   

0000000000002080 <__libc_csu_init>:
    2080:	f3 0f 1e fa          	endbr64 
    2084:	41 57                	push   %r15
    2086:	4c 8d 3d 1b 11 00 00 	lea    0x111b(%rip),%r15        # 31a8 <__frame_dummy_init_array_entry>
    208d:	41 56                	push   %r14
    208f:	49 89 d6             	mov    %rdx,%r14
    2092:	41 55                	push   %r13
    2094:	49 89 f5             	mov    %rsi,%r13
    2097:	41 54                	push   %r12
    2099:	41 89 fc             	mov    %edi,%r12d
    209c:	55                   	push   %rbp
    209d:	48 8d 2d 0c 11 00 00 	lea    0x110c(%rip),%rbp        # 31b0 <_DYNAMIC>
    20a4:	53                   	push   %rbx
    20a5:	4c 29 fd             	sub    %r15,%rbp
    20a8:	48 83 ec 08          	sub    $0x8,%rsp
    20ac:	e8 47 00 00 00       	callq  20f8 <_init>
    20b1:	48 c1 fd 03          	sar    $0x3,%rbp
    20b5:	74 1f                	je     20d6 <__libc_csu_init+0x56>
    20b7:	31 db                	xor    %ebx,%ebx
    20b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    20c0:	4c 89 f2             	mov    %r14,%rdx
    20c3:	4c 89 ee             	mov    %r13,%rsi
    20c6:	44 89 e7             	mov    %r12d,%edi
    20c9:	41 ff 14 df          	callq  *(%r15,%rbx,8)
    20cd:	48 83 c3 01          	add    $0x1,%rbx
    20d1:	48 39 dd             	cmp    %rbx,%rbp
    20d4:	75 ea                	jne    20c0 <__libc_csu_init+0x40>
    20d6:	48 83 c4 08          	add    $0x8,%rsp
    20da:	5b                   	pop    %rbx
    20db:	5d                   	pop    %rbp
    20dc:	41 5c                	pop    %r12
    20de:	41 5d                	pop    %r13
    20e0:	41 5e                	pop    %r14
    20e2:	41 5f                	pop    %r15
    20e4:	c3                   	retq   
    20e5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    20ec:	00 00 00 00 

00000000000020f0 <__libc_csu_fini>:
    20f0:	f3 0f 1e fa          	endbr64 
    20f4:	c3                   	retq   

Disassembly of section .init:

00000000000020f8 <_init>:
    20f8:	f3 0f 1e fa          	endbr64 
    20fc:	48 83 ec 08          	sub    $0x8,%rsp
    2100:	48 8b 05 71 12 00 00 	mov    0x1271(%rip),%rax        # 3378 <__gmon_start__@Base>
    2107:	48 85 c0             	test   %rax,%rax
    210a:	74 02                	je     210e <_init+0x16>
    210c:	ff d0                	callq  *%rax
    210e:	48 83 c4 08          	add    $0x8,%rsp
    2112:	c3                   	retq   

Disassembly of section .fini:

0000000000002114 <_fini>:
    2114:	f3 0f 1e fa          	endbr64 
    2118:	48 83 ec 08          	sub    $0x8,%rsp
    211c:	48 83 c4 08          	add    $0x8,%rsp
    2120:	c3                   	retq   

Disassembly of section .plt:

0000000000002130 <__cxa_finalize@plt-0x10>:
    2130:	ff 35 82 22 00 00    	pushq  0x2282(%rip)        # 43b8 <__TMC_END__+0x8>
    2136:	ff 25 84 22 00 00    	jmpq   *0x2284(%rip)        # 43c0 <__TMC_END__+0x10>
    213c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002140 <__cxa_finalize@plt>:
    2140:	ff 25 82 22 00 00    	jmpq   *0x2282(%rip)        # 43c8 <__cxa_finalize@GLIBC_2.2.5>
    2146:	68 00 00 00 00       	pushq  $0x0
    214b:	e9 e0 ff ff ff       	jmpq   2130 <_fini+0x1c>

0000000000002150 <printf@plt>:
    2150:	ff 25 7a 22 00 00    	jmpq   *0x227a(%rip)        # 43d0 <printf@GLIBC_2.2.5>
    2156:	68 01 00 00 00       	pushq  $0x1
    215b:	e9 d0 ff ff ff       	jmpq   2130 <_fini+0x1c>

0000000000002160 <strtol@plt>:
    2160:	ff 25 72 22 00 00    	jmpq   *0x2272(%rip)        # 43d8 <strtol@GLIBC_2.2.5>
    2166:	68 02 00 00 00       	pushq  $0x2
    216b:	e9 c0 ff ff ff       	jmpq   2130 <_fini+0x1c>

0000000000002170 <malloc@plt>:
    2170:	ff 25 6a 22 00 00    	jmpq   *0x226a(%rip)        # 43e0 <malloc@GLIBC_2.2.5>
    2176:	68 03 00 00 00       	pushq  $0x3
    217b:	e9 b0 ff ff ff       	jmpq   2130 <_fini+0x1c>

0000000000002180 <pow@plt>:
    2180:	ff 25 62 22 00 00    	jmpq   *0x2262(%rip)        # 43e8 <pow@GLIBC_2.29>
    2186:	68 04 00 00 00       	pushq  $0x4
    218b:	e9 a0 ff ff ff       	jmpq   2130 <_fini+0x1c>

0000000000002190 <gettimeofday@plt>:
    2190:	ff 25 5a 22 00 00    	jmpq   *0x225a(%rip)        # 43f0 <gettimeofday@GLIBC_2.2.5>
    2196:	68 05 00 00 00       	pushq  $0x5
    219b:	e9 90 ff ff ff       	jmpq   2130 <_fini+0x1c>
